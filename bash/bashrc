# .bashrc

#####################
# ❰❰ Environment ❱❱ #
#####################

pathadd() {                                             # Append to path, without duplicates
    [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]] &&\
    export PATH="${PATH:+"$PATH:"}$1"
}
cmd-exists() { type -a $@ &> /dev/null; }               # Test if a command/alias/function exists
source-file() { test -f $1 && source $1; }              # Source a file, if it exists
source-bin() { cmd-exists $1 && source $(which $1); }   # Source an executable, if it exists on path
alias ttput='tty -s && tput'                            # Safe tput, only for TTY sessions

shopt -s dotglob extglob                                # Make glob patterns include hidden files

# Additional runtime config
BASH_COMPLETIONS=~/.config/bash/completions
source $BASH_COMPLETIONS/*                              # Custom shell completion files
source-file /etc/bashrc                                 # Global bashrc
source-file ~/.bash_completion                          # Additional shell completion scripts
source-file ~/.bashrc_style                             # Prompt & command colorization
source-file ~/.bashrc_extra                             # Machine-specific config
source-file ~/.config/tabtab/__tabtab.bash              # Additional shell completion scripts
source-file ~/.bashrc_wsl                               # Additional config for WSL
source-file ~/.local/share/icons-in-terminal/icons_bash.sh
source-file ~/.nvm/nvm.sh
source-file /usr/local/src/fzf/shell/completion.bash
source-file /usr/local/src/fzf/shell/key-bindings.bash
source-file ~/.miniconda/etc/profile.d/conda.sh || pathadd "~/.miniconda/bin"

# Support bash_history across multiple terminals
export HISTFILESIZE=20000
export HISTSIZE=10000
export HISTCONTROL=ignoredups:erasedups
shopt -s histappend

# Paths
pathadd ~/.cargo/bin
pathadd ~/.local/bin
pathadd ~/.poetry/bin
pathadd ~/.pyenv/bin
pathadd ~/.pyenv/shims
pathadd ~/.rvm/bin
pathadd ~/.serverless/bin
pathadd ~/bin
pathadd ~/scripts
pathadd /usr/local/bin
pathadd /usr/local/sbin
pathadd /usr/local/src/fzf/bin

export IGNORE_PATTERNS='*.pyc|*.sw*|.cache|.git|__pycache__'
export DOTFILES=~/dotfiles
[ -z "$DOTFILES_EXTRA" ] && export DOTFILES_EXTRA=~/dotfiles-extra
export WORKSPACE=~/workspace
alias cw='cd $WORKSPACE'

# Set ssh-agent socket, if it's set up as a systemd service
DEFAULT_SSH_AUTH_SOCK=$XDG_RUNTIME_DIR/ssh-agent.socket
if  [ -S $DEFAULT_SSH_AUTH_SOCK ] ; then
    export SSH_AUTH_SOCK=$DEFAULT_SSH_AUTH_SOCK
fi

# Python stuff
unset PYTHONPATH
export VIRTUAL_ENV_DISABLE_PROMPT=1
export VIRTUALENVWRAPPER_PYTHON=$(which python)
export VIRTUALENV_REQUIREMENTS=~/dotfiles/scripts/requirements-virtualenvs.txt
source-bin virtualenvwrapper.sh

# Init pyenv, if installed
cmd-exists pyenv && eval "$(pyenv init -)"

export SHELL=$(which fish)

# Misc application-specific settings
export NTP_SERVER='pool.ntp.org'
export JUPYTER_LOCAL_PORT=9468


#########################
# ❰❰ General Aliases ❱❱ #
#########################

export EDITOR=/usr/bin/nvim

# Simple Command/App Aliases
alias ac='npx all-contributors'
alias feh='feh --borderless'
alias feh-montage='feh --montage --thumb-height 150 --thumb-width 150 --index-info "%nn%wx%h"'
alias hf='hyperfine'
alias lw='sudo logwatch | less'
alias pycharm='~/.local/pycharm/bin/pycharm.sh &'
alias retroterm='/usr/local/src/retro-term/cool-retro-term &'
alias rr='ranger'
alias ta='type -a'; complete -c ta
alias term-code='termy -mfl code &'
alias term-dev='termy -mfl 4-split &'
alias term-start='termy -l start &'
alias termy='PYTHONPATH= terminator'
alias vim8='/usr/bin/vim'
alias vim='nvim'
alias vimdiff='nvim -d'
alias weather='curl -4 http://wttr.in/~50266'

# Modern replacements for Unix tools
cmd-exists zoxide && eval "$(zoxide init bash)"

# alias cd='__zoxide_z'
# alias fd='fdfind'
alias ps='procs'
alias pst='procs --tree'
alias psw='procs --watch'
alias rr='ranger'
alias top='btm --color gruvbox'
alias tt='tig'
alias zz='__zoxide_zi'

if cmd-exists batcat; then
    # bat executable is installed as 'batcat' on Ubuntu due to name collision
    alias bat='batcat'
    alias cat='batcat'
elif cmd-exists bat; then
    alias cat='bat'
fi


####################
# ❰❰ Misc Utils ❱❱ #
####################

# Most frequently used commands
hist-frequency() {
    history \
    | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}'\
    | sort -rn | less
}

# Run cmd with no output
nullify() { "$@" &> /dev/null; }

# Prompt for confirmation before continuing
prompt-confirm() {
    read -p " Continue? [Y/N]" -n 1 -r CONFIRM; echo
    if [[ $CONFIRM =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

# Recursive word count
wcr() { gr "$1" $2 | wc -l; }


################
# ❰❰ Search ❱❱ #
################

# fd() { find ${2:-.} -name "$1" -prune -type d; }        # Recursive search (lit, dirs)
ff() { find ${2:-.} -name "$1" -type f; }               # Recursive search (lit, files)
ge() { env | grep ${1:-""}; }                           # Search environment variables
gr() { grep -r "$1" ${@:2}; }                           # Recursive search
grr() { grep -r "$1" $(pwd-base) test; }                # Recursive search default src and test dirs
newest() {                                              # Find most recent file w/ pattern
    find ${2:-.} -type f -name $1 -print0 |\
    xargs -0 ls -t | head -n1
}


###############################
# ❰❰ File & Directory Info ❱❱ #
###############################

# Recursive folder size
unalias du > /dev/null
if cmd-exists dust; then
    alias du='dust'
else
    du() {
        /usr/bin/du -Sh $@ | sort -hr | color-filesize | more
    }
fi

# Customize ls
if cmd-exists exa; then
    alias ls='exa -aF --group-directories-first --icons'
    alias ll='exa -alF --git --group-directories-first --icons --time-style=long-iso --color-scale'
elif cmd-exists colorls; then
    alias ls='colorls -A --group-directories-first'
    alias ll='colorls -AGl --group-directories-first'
else
    alias ll='ls -Alhv --group-directories-first'
fi

alias sll='sudo -E ls -Alhv --group-directories-first'  # Long list with sudo
lt() { tree $@ | color-filesize; }                      # Colored folder tree
lt2() { tree -L 2 $@ | color-filesize; }                # Colored folder tree (depth 2)
md() { mkdir -p "$@" && cd "$@"; }                      # Create a dir and enter it
mode() { stat -c "%a %n" ${1:-*}; }                     # Get octal file permissions
pwd-base() { basename $(pwd); }                         # Base name of the current working dir
alias pwd-src="pwd-base | sed 's/-/_/g'"                # Guess name of project src dir
alias tailf='tail -f -n 50'                             # Tail -f w/ defaults
alias tailn='tail -n 100'                               # Tail w/ defaults
tailc() { tailf $@ | grcat conf.logfile; }              # Tail -f w/ generic syntax highlighting
alias tree='tree -CAFah --du --dirsfirst --prune -I "$IGNORE_PATTERNS"'


#########################
# ❰❰ File Operations ❱❱ #
#########################

# Copy or move $file to $file.bak
bak() {
    cp -v "$1"{,.bak} 2> /dev/null
}
mv-bak() {
    mv -v "$1"{,.bak} 2> /dev/null
}

# Copy a file, also saving a backup ($file.bak) of target file if it already exists
# Optionally run as a different user, e.g. root
# Usage: cp-bak source dest [user]
cp-bak() {
    if [ -n "$3" ]; then
        su -c "cp -v $1{,.bak} 2> /dev/null; cp -v $1 $2" "$3"
    else
        bak "$1"
        cp -v "$1" "$2"
    fi
}

# Verbose copy w/progress
cpv() {
    rsync --whole-file --archive --human-readable --progress --verbose $1 $2;
}

# Formatted preview for CSV files
# Usage: csv-preview file [n_rows]
csv-preview() {
    n_rows=$((${2:-1000} + 1))
    head -n $n_rows "$1" | sed 's/,,/, ,/g;s/,,/, ,/g' | column -s, -t | less -#2 -NSKQF
}
alias cv='csv-preview'

# Create an archive (*.tar.gz) from given directory
maketar() {
    tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"
}

# Create a ZIP archive of a file or folder.
makezip() {
    zip -r "${1%%/}.zip" "$1"
}

# Mutli-format extract function
extract() {
    [ ! -f $1 ] && echo "$1 is not a valid file" && return 1
    case $1 in
        *.tar.bz2)   tar xvjf $1     ;;
        *.tar.gz)    tar xvzf $1     ;;
        *.bz2)       bunzip2 $1      ;;
        *.rar)       unrar x $1      ;;
        *.gz)        gunzip $1       ;;
        *.tar)       tar xvf $1      ;;
        *.tbz2)      tar xvjf $1     ;;
        *.tgz)       tar xvzf $1     ;;
        *.zip)       unzip $1        ;;
        *.Z)         uncompress $1   ;;
        *.7z)        7z x $1         ;;
        *)           echo "unsupported archive format" ;;
    esac
}

# Swap two files
swap() {
    # Neither file exists (or were not specified)
    [ $# -ne 2 ] && return 1
    [ -e $1 -o -e $2 ] || return 1

    # Only one file exists
    [ ! -e $1 ] && mv "$2" "$1" && return 0
    [ ! -e $2 ] && mv "$1" "$2" && return 0

    # Both files exist
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# Usage: chownr [user] [group]
chownr() {
    chown_user=${1:-$USER}
    echo $chown_user:${2:-$chown_user}
}


######################################
# ❰❰ File Operations: Danger Zone ❱❱ #
######################################

# Recursive find/replace
# Usage: grepsed find replace [directory]
grepsed() {
    FILE_COUNT=$(wcr "$1" "$3")
    if [ $FILE_COUNT -gt 0 ]; then
        printf "Replacing $FILE_COUNT occurances of '$1' with '$2'."
        if prompt-confirm; then
            grep -rl --exclude-dir=.git "$1" ${3:-.} | xargs sed -i "s/$1/$2/g"
        fi
    else
        echo "No occurances of '$1' found"
    fi
}

# Recursive find/delete files
rrm() {
    num_files=$(find ${2:-.} -name "$1" -type f | wc -l)
    printf "Deleting $num_files files."
    if prompt-confirm; then
        find ${2:-.} -name "$1" -type f -delete
    fi
}

# Recursive find/delete directories
rrmdir() {
    num_dirs=$(find ${2:-.} -name "$1" -type d | wc -l)
    printf "Deleting $num_dirs dirs."
    if prompt-confirm; then
        find ${2:-.} -name "$1" -type d -exec rm -rf '{}' \;
    fi
}

# Wipe root volume free space (when sfill from secure-erase is not available)
sfill() {
    root_device=$(df-device /)
    free_bytes=$(df-free /)
    out_file=/random_fill
    printf "Wiping free space in root volume $root_device ($free_bytes bytes)."
    if prompt-confirm; then
        sudo sh -c "dd if=/dev/urandom | pv --size=$free_bytes | dd of=$out_file bs=1M; rm -f $out_file"
    fi
}


############################
# ❰❰ Disk & Device Info ❱❱ #
############################

# Disk usage
unalias df > /dev/null
if cmd-exists duf; then
    alias df='duf'
else
    df() {
        /bin/df -khT $@ | color-filesize
    }
fi

# Get a single metric for a single device (or a directory's device)
# Usage: df-single-metric metric [device]
df-single-metric() {
    /usr/bin/df --block-size=1 --output="$1" "${2:-.}" | /usr/bin/tail -1
}

# Shortcuts for individual metrics
df-device() { df-single-metric "source" "$1"; }
df-type()   { df-single-metric "fstype" "$1"; }
df-size()   { df-single-metric "size"   "$1"; }
df-used()   { df-single-metric "used"   "$1"; }
df-free()   { df-single-metric "avail"  "$1"; }
df-mount()  { df-single-metric "target" "$1"; }


#################
# ❰❰ Network ❱❱ #
#################

alias listen='lsof -P -i -n | grcat conf.nmap'
alias local-ip='(ifconfig | awk "/inet/ { print $2 } " | sed -e s/addr://)'
alias public-ip='curl v4.ifconfig.co'
alias netconn='netstat -pan --inet'
alias tracert='traceroute'
alias unproxy='unset http_proxy https_proxy ftp_proxy no_proxy HTTP_PROXY HTTPS_PROXY FTP_PROXY'
alias scan-local='nmap -v -sT localhost'
alias scan-syn='sudo nmap -v -sS localhost'
alias ssh-exit='ssh -O exit'
cmd-exists gping && alias ping='gping'

ssh-refresh() { nullify ssh -O exit $1; ssh $1; }

# Mount a network share (remote_share, local_mountpoint, creds_file)
mount-share(){
    if ! mountpoint "$2" &> /dev/null; then
        sudo mkdir -p "$2"
        sudo mount -v -t cifs -o credentials="$3" "$1" "$2"
    else
        echo 'Already mounted'
    fi
}


#####################
# ❰❰ System Info ❱❱ #
#####################

alias date-update='sudo ntpdate $NTP_SERVER'
distinfo() { cat /etc/os-release; lsb_release -a; }                         # Distribution info
alias lu='column -ts: /etc/passwd | sort'                                   # Formatted local user list
alias lu-current='w -hs | cut -d " " -f1 | sort | uniq'                     # Currently logged on users
alias path='echo -e ${PATH//:/\\n}  | lc-gradient --seed=8'                 # List/format items on PATH
alias psu='ps -u $USER -o pid,%cpu,%mem,bsdtime,command'                    # List user processes

# Hardware
alias cdrom-info='cat /proc/sys/dev/cdrom/info'
alias pci-info='lspci -vnn'
alias usb-info='lsusb -v'

# Combined system information
sysinfo() {
    echo -e "\n${RED}Host information:$NOCOLOR " ; uname -a | lc-gradient -S 60
    echo -e "\n${RED}Distro information:$NOCOLOR " ; distinfo | lc-gradient -S 60
    echo -e "\n${RED}Users logged on:$NOCOLOR " ; lu-current | lc-gradient -S 60
    echo -e "\n${RED}Current date :$NOCOLOR " ; date | lc-gradient -S 60
    echo -e "\n${RED}Machine stats :$NOCOLOR " ; uptime | lc-gradient -S 60
    echo -e "\n${RED}Memory stats :$NOCOLOR " ; free | lc-gradient -S 60
    echo -e "\n${RED}Diskspace :$NOCOLOR " ; df
    echo -e "\n${RED}Local IP Address :$NOCOLOR" ; local-ip | lc-gradient -S 60
    echo -e "\n${RED}Public IP Address :$NOCOLOR" ; public-ip | lc-gradient -S 60
    echo -e "\n${RED}Open connections :$NOCOLOR "; netconn;
    echo
}


#######################
# ❰❰ Configuration ❱❱ #
#######################

# Commonly used config files
BASH_CONF="$DOTFILES/bash/bashrc"
BASH_CONF_ALL="$DOTFILES/bash/bashrc*"
FISH_CONF=$DOTFILES/fish/config.fish
GIT_CONF="$DOTFILES/git/gitconfig"
PIP_CONF=~/.config/pip/pip.conf
PG_CONF="$DOTFILES/postgres/psqlrc ~/.auth/pgpass"
SETUP_CONF="$DOTFILES/Makefile"
SSH_CONF="$DOTFILES_EXTRA/ssh/config"
VIM_CONF="$DOTFILES/vim/vimrc"
VIM_CONF_ALL="$VIM_CONF $DOTFILES/vim/README.md"

# Add config from extra dotfiles repo, if it exists
if [ -d $DOTFILES_EXTRA ]; then
    BASH_CONF_ALL="$BASH_CONF_ALL $DOTFILES_EXTRA/bash/bashrc*"
    SETUP_CONF="$SETUP_CONF $DOTFILES_EXTRA/Makefile"
fi

# Editor shortcuts
alias sb='echo "reloading bashrc..." | lolcat-q; source $BASH_CONF'
alias vb='$EDITOR $BASH_CONF'
alias vbb='$EDITOR -O2 $BASH_CONF_ALL $FISH_CONF'
alias vg='$EDITOR $GIT_CONF'
alias vv='$EDITOR $VIM_CONF'
alias vvv='$EDITOR -O2 $VIM_CONF_ALL'
alias vc='$EDITOR -O2 $BASH_CONF_ALL $FISH_CONF $VIM_CONF_ALL $GIT_CONF $PG_CONF $SSH_CONF $SETUP_CONF'
alias svim="sudo -E $EDITOR"
alias sv='svim'

# Append a line to user crontab, excluding duplicates
crontab-append() {
    if ! [[ $(crontab -l) =~ "$1" ]]; then
        (crontab -l 2>/dev/null; echo "$1") | crontab -
        echo "Updated crontab:"
    else
        echo "Already in crontab:"
    fi
    crontab -l
}

# Append a line to root crontab, excluding duplicates
scrontab-append() {
    sudo bash -c "source $HOME/.bashrc; crontab-append '$1'";
}

# Append a line to arbitrary user's crontab, excluding duplicates
crontab-append-user() {
    sudo -u $2 bash -c "source $HOME/.bashrc; crontab-append '$1'";
}


####################
# ❰❰ Encryption ❱❱ #
####################

export CA_CERT_DIR=/usr/local/share/ca-certificates/extra/
alias gen-aes='openssl enc -aes-256-cbc -P -md sha512'
alias gen-rsa='ssh-keygen -t rsa -b 4096'
alias gen-self-cert='openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365'

get-tls-cert() {
    openssl s_client -starttls smtp -connect "$1":587 \
    | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'
}

install-ca-root-cert() {
    sudo mkdir -p $CA_CERT_DIR
    sudo mv $1 $CA_CERT_DIR
    sudo update-ca-certificates
}

ssh-set-permissions() {
    chmod 700 ~/.ssh
    chmod 600 ~/.ssh/config
    chmod 644 ~/.ssh/authorized_keys
    chmod 644 ~/.ssh/known_hosts
    chmod 644 ~/.ssh/*.pub
    chmod 600 ~/.ssh/*.pem
    # Find and chmod private keys, assuming pubkeys are also present and named "${privkey}.pub"
    find ~/.ssh -name "*.pub" -type f | sed 's/\.pub//g' | xargs chmod 600
}


#############
# ❰❰ Git ❱❱ #
#############

export GLOBAL_REPO_DIR='/usr/local/src'

# General
# ------------------------------
alias gp='git pull'
alias gpr='git pull --rebase'
alias gpush='git push'
alias gfpush='git push --force'
alias gpr='git stash; git pull --rebase; git stash pop'
alias gstash='git stash'
alias gstlist='git stash list; git stash show'
alias gpop='git stash pop'
alias gs='git status'
alias gsv='git status -vv'
alias gss='git status --short'
alias gf='git fetch --all'
alias groot='cd $(git rev-parse --show-toplevel)'
alias gremote='git remote | head -n 1'
alias gitonup='git push'
alias gitondown='git pull'
gadd() { git add ${@:-.}; }
ggr() { git grep "$1" ${@:2}; }
gpu() {
    branch=${1:-$(gbranch)}
    git pull upstream $branch
    git push origin $branch
}
grm(){ rm $1; git rm $1; }
gffpush() {
    branch=${1:-$(gbranch)}
    git push -f upstream $branch
    git push -f origin $branch
}

# Commits
# ------------------------------
alias gc='git commit --verbose'
alias gcm='git commit -m'
alias gfirst='git rev-parse --short $(git rev-list --max-parents=0 HEAD)'
alias gmend='git commit --amend'
alias gmendc='git commit --amend --no-edit'
alias grevise='git add --all; git commit --amend --no-edit'
alias gpatch='git add --patch'
alias gunstage='git reset HEAD'
alias guncommit='git reset --soft HEAD~1'
alias grecommit='git commit -c ORIG_HEAD --no-edit'

# Set last commit date to specified (or current) date
gmend-date() {
    target_date=${1:-$(date)}
    GIT_COMMITTER_DATE="$target_date" git commit --amend --no-edit --date "$target_date"
}

# Functions to help fix a branch from a detatched HEAD state, starting with a specified commit
git-head-transplant-pre() {
    git checkout -b transplant $1
}
git-head-transplant() {
    git branch -f main transplant
    git checkout main
    git branch -d transplant
    git push origin main
}

# Log
# ------------------------------
export GLOG_FORMAT="%C(blue)%h  %C(cyan)%ad  %C(reset)%s%C(green)  [%cn] %C(yellow)%d"
alias glog='git log --pretty=format:"$GLOG_FORMAT" --decorate --date=short'
alias glog-branch='glog main..HEAD'
alias glog-remote='gf; glog HEAD..origin/main'
alias glol='glog | lc-gradient-delay'
alias gcstat='git shortlog --summary --numbered'
alias gcstat-all='git rev-list --count HEAD'

# Tags
# ------------------------------
gmv-tag() {
    git tag -d $1
    git push origin :refs/tags/$1
    git tag $1 $2
    git push --tags
}

grm-tag() {
    git tag -d $1
    git push origin :refs/tags/$1
    git push upstream :refs/tags/$1
}


# Branches
# ------------------------------

export GREF_FORMAT="%(align:60,left)%(color:blue)%(refname:short)%(end) \
                    %(color:cyan)%(committerdate:short) %(color:green)[%(authorname)]"
alias gbranches='git branch -vv'
alias gbranch='git rev-parse --abbrev-ref HEAD'
# Alternative: alias gbranch="git branch | grep \\* | cut -d ' ' -f2"
alias gbmv='git branch -m'
alias gball='git for-each-ref --sort=-committerdate --format="$GREF_FORMAT" refs/remotes/'
alias gbprune='git fetch --prune'
grebase() { git rebase --interactive --rebase-merges ${1:-main}; }
gsrebase() {
    git stash
    git rebase --interactive --rebase-merges ${1:-main}
    git stash pop
}
grebase-upstream() {
    git fetch upstream
    git rebase --interactive --rebase-merges upstream/${1:-main}
}
alias gcontinue='git rebase --continue'
alias gabort='git rebase --abort || git merge --abort'
alias gskip='git rebase --skip'
alias gscontinue='git stash; git rebase --continue; git stash pop'

# Overwrite local branch with remote
gbreset() {
    remote=${2:-$(gremote)}
    branch=${1:-$(gbranch)}
    git fetch $remote $branch
    git status
    printf "Resetting branch to $remote/$branch."
    prompt-confirm && git reset --hard $remote/$branch
}

# Pull if repo is alredy cloned, otherwise clone
gpclone() {
    # If only a repo URL is provided, use the basename of that as the dir name
    repo_dir=${2:-$(basename $1)}
    if [ -d "$repo_dir" ]; then
        git -C $repo_dir pull
    else
        git clone $1 $repo_dir
    fi
}

sgpclone() {
    repo_dir="${GLOBAL_REPO_DIR}/$(basename $1)"
    if [ -d "$repo_dir" ]; then
        sudo git -C $repo_dir pull
    else
        sudo git clone $1 $repo_dir
    fi
}

# Delete local and remote branch
grm-branch() {
    remote=${2:-$(gremote)}
    branch=${1:-$(gbranch)}
    printf "Deleting local and remote branch $remote/$branch"

    if prompt-confirm; then
        git branch -D $1
        git push origin --delete $1
    fi
}
cmd-exists __git_complete && __git_complete grm-branch _git_branch

# GitHub
# ------------------------------

# Get latest version info from a project's GitHub Releases
git-releases() {
    curl --silent "https://api.github.com/repos/$1/releases/latest"
}
git-latest-release() {
    git-releases $1 | jq -r .tag_name
}
git-latest-release-link() {
    git-releases $1 | jq -r '.assets[0].browser_download_url'
}
git-latest-release-rpm() {
    git-releases $1 | jq -r '.assets[] | select(.name | endswith("x86_64.rpm")).browser_download_url'
}


################
# ❰❰ Docker ❱❱ #
################

# Vanilla Docker
# ------------------------------

alias dps='docker ps -a'
alias dlog='docker logs -f'
alias dstat='docker stats'

function dbash() {
    docker exec -ti $1 /bin/bash
}

function dkill() {
    docker kill $1 && docker rm $1
}

# Docker-Compose
# ------------------------------

# Optionally invoke docker-compose with config specified in an environment variable
function dco() {
    if [[ -f "$DOCKER_COMPOSE_FILE" ]]; then
        docker-compose -f $DOCKER_COMPOSE_FILE "$@"
    else
        docker-compose
    fi
}

function dc-update() {
    dco pull
    dco build --pull
    dco up -d
    docker image prune -f
    docker volume prune -f
}

alias dcu='dco up -d'
alias dcub='dco up -d --build'
alias dcd='dco down'
alias dcr='dco restart'
alias dcps='dco ps'


##############
# ❰❰ Tmux ❱❱ #
##############

alias tls='tmux ls'
alias trm='tmux kill-session -t'
 # Create new session, or attach if it already exists
tnew() {
    tmux new-session -A -s $1 -c ${2:-~}
}


################
# ❰❰ Python ❱❱ #
################

alias bb='black --target-version py37 --line-length 100 --skip-string-normalization'
alias install-pretty-errors='python -m pretty_errors -s -p'
# Get all directories currently on the python site path
alias pypath='python -c "import sys; print(\"\n\".join(sys.path))"'
# Get site-packages directory of currently active interpreter (e.g., within a virtualenv)
alias py-site-packages='python -c\
    "from distutils.sysconfig import get_python_lib;\
    print(get_python_lib())"'
# Determine if we are running in a virtualenv
alias in-env='python -c\
              "import sys;\
               sys.exit(0 if hasattr(sys, \"real_prefix\") else 1)"'
alias lsv='lsvirtualenv -b'
alias pipgrep='pip freeze | grep -i'
cmd-exists pt || alias pt='pytest'

# Tox / Nox
alias toxe='tox -e'
alias noxe='nox -e'
alias ncov='nox -e cov'
alias ndocs='nox -e docs'
alias ldocs='nox -e livedocs'
alias nlint='nox -e lint'
alias ntest='nox -e test'

# Show a bunch of relevant python environment info
py-debug() {
    printf "PATH:\n"
    path
    printf "\nPYTHONPATH: $PYTHONPATH\n\n"
    printf "sys.path:"
    pypath
    printf "\nsite-packages:"
    py-site-packages
    printf "In a virtualenv?"
    in-env && echo 'Yes' || echo 'No'

    printf "\nExecutables:\n"
    which python && python --version
    which python3 && python3 --version
    which pip && pip --version
    which pip3 && pip3 --version
}

# Pip install a package, temporarily overriding any custom index URLs
pip-install-default() {
    pip install -U --index-url=https://pypi.org/simple/ --extra-index-url=https://pypi.org/simple/ "$@"
}

# Install python packages from a specific requirements file
pip-install-req() {
    echo; print-title "Installing $1..."
    [[ -f $1 ]] && pip install -Ur $1 | lc-gradient --seed=100
}

# Get all available versions of a package
# Note: Output is broken with 2020 resolver, so this uses the legacy version; see https://github.com/pypa/pip/issues/9139
function pip-versions() {
    version_list=$(\
        pip install --use-deprecated=legacy-resolver "$1==none" 2>&1 \
        | head -n 1 \
        | sed 's/.*(from versions: \(.*\))/\1/' \
    )
    format-version-list $version_list
}

# Highlight and indent major (x.0.0) and minor (x.x.0) versions
# in a comma-separated list of version numbers
function format-version-list() {
    major_color=$(echo -e $BOLD_CYAN)
    minor_color=$(echo -e $BOLD_WHITE)
    nocolor=$(echo -e $NOCOLOR)

    echo $@ \
        | sed 's/\, /\n/g' \
        | sed -e "s/^\([0-9]\+\.0\.0\)/$major_color\1$nocolor/g" \
        | sed -e "s/^\([0-9]\+\.[0-9]\+\.0\)/$minor_color \1$nocolor/g" \
        | sed -e "s/^\([0-9]\+\.[0-9]\+\.[0-9]\+\)/  \1/g"
}

# Install python packages from all available requirements files and/or setup.py
pipr() {
    unset PYTHONPATH
    pip install -Ur $VIRTUALENV_REQUIREMENTS

    if test -e setup.py; then
        pip install -Ue  '.[all,dev]'
    else
        poetry install -v
    fi

    for f in $(ls requirements*.txt 2> /dev/null | sort -V); do
        pip-install-req $f
    done
}

alias pipv='pip install -Ur $VIRTUALENV_REQUIREMENTS'
alias pip-uninstall-all='pip freeze | xargs pip uninstall -y'

# Install/update global python packages, if specified in dotfiles
update-python() {
    make -C $DOTFILES update-python | lc-gradient-delay
    make -C $DOTFILES_EXTRA update-python | lc-gradient-delay
}

# Run pytest with ipdb as debugger
function ipt() {
    export PYTHONBREAKPOINT='ipdb.set_trace'
    export IPDB_CONTEXT_SIZE=7
    pytest -s $@
}

# New virtual environment, with paths and packages (optionally with name, otherwise use dirname)
mkv() {
    mkvirtualenv -p python3 -a . ${1:-$(pwd-base)}
    unset PYTHONPATH
    add2virtualenv .
    py-cleanup
    pipr
}

# Clean up leftover junk
py-cleanup() {
    find ${1:-.} -name "*.pyc" -type f -delete -printf "%h/%f\n"
    find ${1:-.} -name "__pycache__" -prune -type d -printf "%h/%f\n" -exec rm -rf '{}' \; 2> /dev/null
}
vim-cleanup() {
    find ${1:-.} -name "*.sw[mnop]" -type f -delete -printf "%h/%f\n"
}

# Open HTML coverage report
alias cov-open='xdg-open test-reports/index.html'

# Run py.test with ludicrous verbosity
ptv(){
    py-cleanup
    vim-cleanup
    py.test -vvv -rwrs --capture=no --full-trace ${1:-./test}
}

# Generate HTML py.test coverage report
ptc() {
    py.test -n auto --dist=loadfile --cov --cov-report=term --cov-report=html
    [[ -f htmlcov/index.html ]] && xdg-open htmlcov/index.html &
}

# Print source path of a python module
pyfile() {
    python -c "import $@; print($@.__file__)" | sed 's/\.pyc/\.py/'
}

pydir() {
    python -c "import $@; print($@.__file__)" | xargs dirname
}

alias pf='pyfile'
alias pd='pydir'

# Open source file of a python module
vpyfile() {
    pf_path=$(pyfile $@)
    [[ -f $pf_path ]] && $EDITOR $pf_path
}
alias vpf='vpyfile'

# Cat source file of a python module
cpyfile() {
    pf_path=$(pyfile $@)
    [[ -f $pf_path ]] && cat $pf_path
}
alias cpf='cpyfile'

# Edit virtualenv path extensions
alias vvpathext='$EDITOR $(py-site-packages)/_virtualenv_path_extensions.pth'
alias vvp='vvpathext'
alias vsp='py-site-packages'

# Workon & cd/deactivate a virtualenv (with autocomplete)
wo() {
    if [ -n "$1" ]; then
        workon $1
        export _VIRT_ENV_PREV_PWD=$PWD
        unset PYTHONPATH
        cd $WORKSPACE/$1
    else
        deactivate
        cd $_VIRT_ENV_PREV_PWD
        source $BASH_CONF
    fi
}
complete -o default -o nospace -F _virtualenvs wo

# Misc shortcuts for python apps & scripts
alias flask-run='export FLASK_APP=$(pwd-src)/runserver.py;\
                 export FLASK_APP_ENV=LOCAL;\
                 export FLASK_DEBUG=1;\
                 flask run'


################
# ❰❰ Sphinx ❱❱ #
################

sphinx-build-project() {
    # Use 'all' target, if it exists
    make -C docs all | lc-gradient --seed=26
    # If it doesn't exist (make error code 2), use 'html' target
    if [ $PIPESTATUS -eq 2 ]; then
        make -C docs clean html | lc-gradient --seed=26
    fi
}

sphinx-autobuild-project() {
    make -C docs clean
    sphinx-autobuild docs/ docs/_build/html \
        --ignore '*.csv' \
        --ignore '*Makefile' \
        --port 8181 \
        --open-browser \
        -j auto
}


alias sp-open='xdg-open docs/_build/html/index.html'
alias sp-build='sphinx-build-project'
alias sp-auto='sphinx-autobuild-project'


#########################
# ❰❰ Distro-Specific ❱❱ #
#########################

# TODO: Separate .bashrc_$distro files, if/when needed

# Tests
system-is-rpm() {
    /usr/bin/rpm -q -f /usr/bin/rpm &> /dev/null
}
system-is-deb() { [ -f "/etc/debian_version" ]; }

# Fedora-based
# ------------------------------

function update-dnf() {
    print-title "Updating system packages..."
    sudo dnf update -y --skip-broken | lc-hgradient-delay
}
alias suspend-systemd='systemctl suspend'
alias hibernate-systemd='systemctl hibernate'

# Kernel utils
ls-kernels() {
    print-title "All installed kernels:"
    rpm -qa kernel\* | sort -V
}
alias lsk='ls-kernels'
ls-old-kernels() {
    n_keep=${1:-2}
    print-title "Current kernel packages (latest $n_keep versions):"
    dnf repoquery --installonly --latest-limit=$n_keep -q
    print-title "Older kernel packages:"
    dnf repoquery --installonly --latest-limit=-$n_keep -q
}
rm-old-kernels() {
    n_keep=${1:-2}
    ls-kernels-old $n_keep
    echo
    sudo dnf remove $(dnf repoquery --installonly --latest-limit=-$n_keep -q)
}
fix-rpmdb() {
    restorecon -Rv /var/lib/rpm
    sudo rpmdb --rebuilddb
}

cmd-exists update-grub || alias update-grub='sudo grub2-mkconfig -o /boot/grub2/grub.cfg'

# Debian-based
# ------------------------------

alias update-apt='print-title "Updating system packages...";\
                  sudo apt-get update;\
                  sudo apt-get -y --allow-unauthenticated\
                  dist-upgrade | lc-hgradient-delay'
alias update-apt-unattended='print-title "Updating system packages...";\
                             sudo apt-get update;\
                             sudo apt-get -y --allow-unauthenticated\
                             -o Dpkg::Options::="--force-confdef"\
                             -o Dpkg::Options::="--force-confnew"\
                             dist-upgrade | lc-hgradient-delay'
alias suspend-pm='pm-suspend'
alias hibernate-pm='pm-hibernate'

# Install a .deb file from url
install-deb() {
    deb_tempfile=$(mktemp --suffix=.deb)
    wget -O $deb_tempfile $1
    sudo apt-get install -y $deb_tempfile
    sleep 1
    rm $deb_tempfile
}


##################
# ❰❰ Services ❱❱ #
##################

# TODO: Add aliases for non-systemd distros, if/when needed

# systemd
alias svc-start='sudo systemctl start'
alias svc-restart='sudo systemctl restart'
alias svc-stop='sudo systemctl stop'
alias svc-status='systemctl status'
alias svc-reload='sudo systemctl reload'
alias svc-reload-all='sudo systemctl daemon-reload'
alias svc-log='journalctl -xe'

# Apache
if system-is-deb; then
    export APACHE_SVC_NAME=apache2
else
    APACHE_SVC_NAME=httpd
fi
alias ap-start='svc-start $APACHE_SVC_NAME'
alias ap-restart='svc-restart $APACHE_SVC_NAME'
alias ap-stop='svc-stop $APACHE_SVC_NAME'
alias ap-status='svc-status $APACHE_SVC_NAME'
alias ap-reload='svc-reload $APACHE_SVC_NAME'

# Docker
alias docker-start='svc-start docker'
alias docker-restart='svc-restart docker'
alias docker-stop='svc-stop docker'
alias docker-status='svc-status docker'

# MariaDB
alias mdb-start='svc-start mariadb'
alias mdb-restart='svc-restart mariadb'
alias mdb-stop='svc-stop mariadb'
alias mdb-status='svc-status mariadb'

# Postgres
alias pg-start='svc-start postgresql'
alias pg-stop='svc-stop postgresql'
alias pg-restart='svc-restart postgresql'
alias pg-status='svc-status postgresql'
alias psql='PAGER=$PG_PAGER LESS=$PG_LESS psql'

# SSHD
alias sshd-start='svc-start sshd'
alias sshd-stop='svc-stop sshd'
alias sshd-restart='svc-restart sshd'
alias sshd-status='svc-status sshd'

# Jupyter
alias jj='jupyter notebook --port $JUPYTER_LOCAL_PORT &'
alias jl='jupyter notebook list'
alias jk='pkill jupyter'


#############
# ❰❰ AWS ❱❱ #
#############

s3cat() { aws s3 cp s3://$@ -; }
s3ls() { aws s3 ls s3://$@; }
s3rm() { aws s3 rm s3://$@; }


##########################
# ❰❰ Proxied Commands ❱❱ #
##########################

# Proxychains executable varies by distro
if cmd-exists proxychains4; then
    alias proxychains='proxychains4'
fi
alias px='proxychains -q'
alias pxs='sudo proxychains -f ~/.proxychains/proxychains.conf'


# Python
alias pip-install-px='px pip install'

pip-versions-px() {
    px pip install $1==999
}

pipr-px() {
    px pip install -U pip setuptools wheel
    px pip install -U --editable '.[dev]' '.[all]'

    for f in $(ls requirements*.txt 2> /dev/null | sort -V); do
        echo; print-title "Installing $f..."
        px pip install -Ur $f | lc-gradient --seed=100
    done
}

# TODO: make this less ugly
mkv-px() {
    swap $PIP_CONF ${PIP_CONF}.bak
    mkvirtualenv -p python3 -a . ${1:-$(pwd-base)}
    swap $PIP_CONF ${PIP_CONF}.bak
    add2virtualenv .
    pipr-px
}

mkv-basic-px() {
    swap $PIP_CONF ${PIP_CONF}.bak
    mkvirtualenv -p python3 ${1:-$(pwd-base)}
    swap $PIP_CONF ${PIP_CONF}.bak
}


# Split a PDF document into multiple documents by arbitrary page ranges
# Usage: pdf-split-page-ranges $source_file 1-12,13-17,18-40
pdf-split-page-ranges() {
    SOURCE_FILE=$1
    PAGE_RANGES=$(echo $2 | tr ',' ' ')
    BASE_NAME=$(basename -s .pdf $SOURCE_FILE)
    echo $SOURCE_FILE
    echo $BASE_NAME

    for range in $PAGE_RANGES; do
        qpdf $SOURCE_FILE ${BASE_NAME}_${range}.pdf --pages $SOURCE_FILE $range --
    done
}


# Enable Terminator to execute startup commands and keep shell open
[[ $TERM_START_CMD ]] && { eval "$TERM_START_CMD"; }
