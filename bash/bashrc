# .bashrc

#####################
# ❰❰ Environment ❱❱ #
#####################

pathadd() {                                             # Append to path, without duplicates
    [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]] &&\
    export PATH="${PATH:+"$PATH:"}$1"
}
cmd-exists() { type -a $@ > /dev/null 2>&1; }           # Test if a command/alias/function exists
source-file() { [[ -f $1 ]] && source $1; }             # Source a file, if it exists
source-bin() { cmd-exists $1 && source $(which $1); }   # Source an executable, if it exists on path
alias ttput='tty -s && tput'                            # Safe tput, only for TTY sessions

# Additional runtime config
source-file /etc/bashrc                                 # Global bashrc
source-file ~/.bashrc_style                             # Prompt & command colorization
source-file ~/.bashrc_extra                             # Machine-specific config
source-bin virtualenvwrapper.sh

# Support bash_history across multiple terminals
export HISTFILESIZE=20000
export HISTSIZE=10000
export HISTCONTROL=ignoredups:erasedups
shopt -s histappend

# Paths
pathadd ~/.local/bin
pathadd ~/bin
pathadd ~/scripts
pathadd /usr/local/bin
pathadd /usr/local/sbin
export IGNORE_PATTERNS='*.pyc|*.sw*|.cache|.git|__pycache__'
export DOTFILES=~/dotfiles
[ -z "$DOTFILES_EXTRA" ] && export DOTFILES_EXTRA=~/dotfiles-extra
export WORKSPACE=~/workspace
alias cw='cd $WORKSPACE'

# Misc application-specific settings
export NTP_SERVER='pool.ntp.org'
export JUPYTER_LOCAL_PORT=9468


#####################################
# ❰❰ General Functions & Aliases ❱❱ #
#####################################

fd() { find ${2:-.} -name "$1" -prune -type d; }        # Recursive search (lit, dirs)
ff() { find ${2:-.} -name "$1" -type f; }               # Recursive search (lit, files)
ge() { env | grep ${1:-""}; }                           # Search environment variables
gr() { grep -r "$1" ${@:2}; }                           # Recursive search
grr() { grep -r "$1" $(pwd-base) test; }                # Recursive search default src and test dirs
hist-frequency() {                                      # Most frequently used commands
    history |\
    awk '{a[$2]++}END{for(i in a){print a[i] " " i}}'\
    | sort -rn | less
}
alias ll='ls -Alhv --group-directories-first'
lt() { tree $@ | color-filesize; }                      # Colored folder tree
lt2() { tree -L 2 $@ | color-filesize; }                # Colored folder tree (depth 2)
md() { mkdir -p "$@" && cd "$@"; }                      # Create a dir and enter it
mode() { stat -c "%a %n" ${1:-*}; }                     # Get octal file permissions
newest() {                                              # Find most recent file w/ pattern
    find ${2:-.} -type f -name $1 -print0 |\
    xargs -0 ls -t | head -n1
}
nullify() { "$@" >/dev/null 2>&1; }                     # Run cmd with no output
pwd-base() { basename $(pwd); }                         # Base name of the current working dir
alias pwd-src="pwd-base | sed 's/-/_/g'"                # Guess name of project src dir
alias ta='type -a'
alias tailf='tail -f -n 50'
tailc() { tailf $@ | grcat conf.logfile; }
alias tree='tree -CAFah --du --dirsfirst --prune -I "$IGNORE_PATTERNS"'
wcr() { gr "$1" $2 | wc -l; }                           # Recursive word count

# Misc Shortcuts
alias term-code='terminator -mfl code &'
alias term-dev='terminator -mfl 6-split &'
alias term-start='terminator -l start &'
alias retroterm='/usr/local/src/retro-term/cool-retro-term &'
alias lw='sudo logwatch | less'
alias top='htop'
alias tt='tig'
alias weather='curl -4 http://wttr.in/~50266'


####################
# ❰❰ Encryption ❱❱ #
####################

export CA_CERT_DIR=/usr/local/share/ca-certificates/extra/
alias gen-aes='openssl enc -aes-256-cbc -P -md sha512'
alias gen-rsa='ssh-keygen -t rsa -b 4096'
alias gen-self-cert='openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365'

get-tls-cert() {
    openssl s_client -starttls smtp -connect "$1":587 \
    | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'
}

install-ca-root-cert() {
    sudo mkdir -p $CA_CERT_DIR
    sudo mv $1 $CA_CERT_DIR
    sudo update-ca-certificates
}

ssh-set-permissions() {
    chmod 700 ~/.ssh
    chmod 600 ~/.ssh/config
    chmod 644 ~/.ssh/*.pub
    # Find and chmod private keys, assuming pubkeys are also present and named "${privkey}.pub"
    find ~/.ssh -name "*.pub" -type f | sed 's/\.pub//g' | xargs chmod 600
}


#################
# ❰❰ Network ❱❱ #
#################

alias listen='lsof -P -i -n | grcat conf.nmap'
alias local-ip='(ifconfig | awk "/inet/ { print $2 } " | sed -e s/addr://)'
alias public-ip='curl v4.ifconfig.co'
alias netconn='netstat -pan --inet'
alias tracert='traceroute'
alias unproxy='unset http_proxy https_proxy ftp_proxy no_proxy HTTP_PROXY HTTPS_PROXY FTP_PROXY'
alias scan-local='nmap -v -sT localhost'
alias scan-syn='sudo nmap -v -sS localhost'
alias ssh-exit='ssh -O exit'
ssh-refresh() { nullify ssh -O exit $1; ssh $1; }

# Mount a network share (remote_share, local_mountpoint, creds_file)
mount-share(){
    if ! mountpoint $2 > /dev/null 2>&1; then
        sudo mkdir -p $2
        sudo mount -v -t cifs -o credentials=$3 $1 $2
    else
        echo 'Already mounted'
    fi
}


#####################
# ❰❰ System Info ❱❱ #
#####################

alias date-update='sudo ntpdate $NTP_SERVER'
function df() { /usr/bin/df -khT $@ | color-filesize; }                     # Readable disk usage
function du() { /usr/bin/du -Sh $@ | sort -hr | color-filesize | more; }    # Recursive folder size
distinfo() { cat /etc/os-release; lsb_release -a; }                         # Distribution info
alias lu='column -ts: /etc/passwd | sort'                                   # Formatted local user list
alias lu-current='w -hs | cut -d " " -f1 | sort | uniq'                     # Currently logged on users
alias path='echo -e ${PATH//:/\\n}  | lc-gradient --seed=8'                 # List/format items on PATH
alias psu='ps -u $USER -o pid,%cpu,%mem,bsdtime,command'                    # List user processes

# Hardware
alias cdrom-info='cat /proc/sys/dev/cdrom/info'
alias pci-info='lspci -vnn'
alias usb-info='lsusb -v'

# Combined system information
sysinfo() {
    echo -e "\n${RED}Host information:$NOCOLOR " ; uname -a | lc-gradient -S 60
    echo -e "\n${RED}Distro information:$NOCOLOR " ; distinfo | lc-gradient -S 60
    echo -e "\n${RED}Users logged on:$NOCOLOR " ; lu-current | lc-gradient -S 60
    echo -e "\n${RED}Current date :$NOCOLOR " ; date | lc-gradient -S 60
    echo -e "\n${RED}Machine stats :$NOCOLOR " ; uptime | lc-gradient -S 60
    echo -e "\n${RED}Memory stats :$NOCOLOR " ; free | lc-gradient -S 60
    echo -e "\n${RED}Diskspace :$NOCOLOR " ; df
    echo -e "\n${RED}Local IP Address :$NOCOLOR" ; my-ip | lc-gradient -S 60
    echo -e "\n${RED}Open connections :$NOCOLOR "; netconn;
    echo
}


#########################
# ❰❰ Distro-Specific ❱❱ #
#########################

# TODO: Separate .bashrc_$distro files, if/when needed

# Fedora-based
alias update-dnf='print-title "Updating system packages...";\
                  sudo dnf update -y --skip-broken | lc-hgradient-delay'
alias suspend-systemd='systemctl suspend'
alias hibernate-systemd='systemctl suspend'

# Debian-based
alias update-apt='print-title "Updating system packages...";\
                  sudo apt-get update;\
                  sudo apt-get -y --allow-unauthenticated\
                  dist-upgrade | lc-hgradient-delay'
alias update-apt-unattended='print-title "Updating system packages...";\
                             sudo apt-get update;\
                             sudo apt-get -y --allow-unauthenticated\
                             -o Dpkg::Options::="--force-confdef"\
                             -o Dpkg::Options::="--force-confnew"\
                             dist-upgrade | lc-hgradient-delay'
alias suspend-pm='pm-suspend'
alias hibernate-pm='pm-hibernate'

# Install a .deb file from url
install-deb() {
    deb_tempfile=$(mktemp --suffix=.deb)
    wget -O $deb_tempfile $1
    sudo apt-get install -y $deb_tempfile
    sleep 1
    rm $deb_tempfile
}


##################
# ❰❰ Services ❱❱ #
##################

# TODO: Add aliases for non-systemd distros, if/when needed
# TODO: 'httpd' -> 'apache2' on Debian-based & other distros

# systemd
alias svc-start='sudo systemctl start'
alias svc-restart='sudo systemctl restart'
alias svc-stop='sudo systemctl stop'
alias svc-status='systemctl status'

# Apache (httpd)
alias ap-start='svc-start httpd'
alias ap-restart='svc-restart httpd'
alias ap-stop='svc-stop httpd'
alias ap-status='svc-status httpd'

# Docker
alias docker-start='svc-start docker'
alias docker-restart='svc-restart docker'
alias docker-stop='svc-stop docker'
alias docker-status='svc-status docker'

# Postgres
alias pg-start='svc-start postgresql-9.6'
alias pg-stop='svc-stop postgresql-9.6'
alias pg-restart='svc-restart postgresql-9.6'
alias pg-status='svc-status postgresql-9.6'
alias psql='PAGER=$PG_PAGER LESS=$PG_LESS psql'

# Jupyter
alias jj='jupyter notebook --port $JUPYTER_LOCAL_PORT &'
alias jl='jupyter notebook list'
alias jq='pkill jupyter'


#######################
# ❰❰ Configuration ❱❱ #
#######################

# Commonly used config files
BASH_CONF="$DOTFILES/bash/bashrc"
BASH_CONF_ALL="$DOTFILES/bash/bashrc* $DOTFILES_EXTRA/bash/bashrc*"
GIT_CONF="$DOTFILES/git/gitconfig"
PG_CONF="$DOTFILES/postgres/psqlrc ~/.auth/pgpass"
SETUP_CONF="$DOTFILES/Makefile $DOTFILES_EXTRA/Makefile"
SSH_CONF="$DOTFILES_EXTRA/ssh/config"
VIM_CONF="$DOTFILES/vim/vimrc"
VIM_CONF_ALL="$VIM_CONF $DOTFILES/vim/README.md"

# Editor shortcuts
alias sb='echo "reloading bashrc..." | lolcat-q; source $BASH_CONF'
alias vb='vim $BASH_CONF'
alias vbb='vim -O2 $BASH_CONF_ALL'
alias vg='vim $GIT_CONF'
alias vv='vim $VIM_CONF'
alias vvv='vim -O2 $VIM_CONF_ALL'
alias vc='vim -O2 $BASH_CONF_ALL $VIM_CONF_ALL $GIT_CONF $PG_CONF $SSH_CONF $SETUP_CONF'
alias svim='sudo -E $(which vim)'
alias sv='svim'

# Append a line to user crontab, excluding duplicates
crontab-append() {
    if ! [[ $(crontab -l) =~ "$1" ]]; then
        (crontab -l 2>/dev/null; echo "$1") | crontab -
        echo "Updated crontab:"
    else
        echo "Already in crontab:"
    fi
    crontab -l
}

# Append a line to root crontab, excluding duplicates
scrontab-append() {
    sudo bash -c "source $HOME/.bashrc; crontab-append '$1'";
}


#############
# ❰❰ Git ❱❱ #
#############

# General
alias gp='git pull'
alias gpr='git stash; git pull --rebase; git stash pop'
alias gstash='git stash'
alias gstlist='git stash list; git stash show'
alias gpop='git stash pop'
alias gs='git status'
alias gsv='git status -vv'
alias gss='git status --short'
alias gf='git fetch origin master:master'
alias groot='cd $(git rev-parse --show-toplevel)'
alias gitonup='git push'
alias gitondown='git pull'
gadd() { git add ${@:-.}; }
grm(){ rm $1; git rm $1; }
ggr() { git grep "$1" ${@:2}; }

# Commits
alias gc='git commit --verbose'
alias gcm='git commit -m'
alias gfirst='git rev-parse --short $(git rev-list --max-parents=0 HEAD)'
alias gmend='git commit --amend'
alias gmendc='git commit --amend --no-edit'
alias grevise='git add --all; git commit --amend --no-edit'
alias gpatch='git add --patch'
alias gunstage='git reset HEAD'
alias guncommit='git reset --soft HEAD~1'
alias grecommit='git commit -c ORIG_HEAD --no-edit'

# Functions to help fix a branch from a detatched HEAD state, starting with a specified commit
git-head-transplant-pre() {
    git checkout -b transplant $1
}
git-head-transplant() {
    git branch -f master transplant
    git checkout master
    git branch -d transplant
    git push origin master
}

# Log
export GLOG_FORMAT="%C(blue)%h  %C(cyan)%ad  %C(reset)%s%C(green)  [%cn] %C(yellow)%d"
alias glog='git log --pretty=format:"$GLOG_FORMAT" --decorate --date=short'
alias glog-branch='glog master..HEAD'
alias glog-remote='gf; glog HEAD..origin/master'
alias glol='glog | lc-gradient-delay'
alias gcstat='git shortlog --summary --numbered'
alias gcstat-all='git rev-list --count HEAD'

# Tags
gmv-tag() {
    git tag $2 $1
    git tag -d $1
    git push origin :refs/tags/$1
    git push --tags
}

# Branches
export GREF_FORMAT="%(align:60,left)%(color:blue)%(refname:short)%(end) \
                    %(color:cyan)%(committerdate:short) %(color:green)[%(authorname)]"
alias gbranches='git branch -vv'
alias gbmv='git branch -m'
alias gball='git for-each-ref --sort=-committerdate --format="$GREF_FORMAT" refs/remotes/'
alias gbprune='git fetch --prune'
alias grebase='gf; git rebase --interactive master'
alias gbrebase='gf; git rebase --interactive --preserve-merges master'
alias gsrebase='git stash; gf; git rebase --interactive master; git stash pop'
alias grebase-upstream='git fetch upstream; git rebase --interactive upstream/master'
alias gcontinue='git rebase --continue'
alias gscontinue='git stash; git rebase --continue; git stash pop'

# Pull if repo is alredy cloned, otherwise clone
gpclone() {
    repo_dir=${2:-$(basename $1)}
    echo $repo_dir
    if [ -d "$repo_dir" ]; then
        git -C $repo_dir pull
    else
        git clone $1 $repo_dir
    fi
}

# Delete local and remote branch
grm-branch() {
    read -p "Deleting branch $1. Continue?" -n 1 -r CONFIRM; echo
    if [[ $CONFIRM =~ ^[Yy]$ ]]; then
        git branch -D $1
        git push origin --delete $1
    fi
}
type -a __git_complete > /dev/null 2>&1 && __git_complete git-delete-branch _git_branch


################
# ❰❰ Python ❱❱ #
################

alias pypath='python -c "import sys; print(\"\n\".join(sys.path))"'
alias pypackages='python -c\
                  "from distutils.sysconfig import get_python_lib;\
                   print(get_python_lib())"'
alias in-env='python -c\
              "import sys;\
               sys.exit(0 if hasattr(sys, \"real_prefix\") else 1)"'
alias lsv='lsvirtualenv -b'

# Install python requirements from file (specific file)
pip-install-req() {
    echo; print-title "Installing $1..."
    [[ -f $1 ]] && pip install -Ur $1 | lc-gradient --seed=100
}

# Install python requirements from file (all files)
pipr() {
    for f in $(ls requirements*.txt 2> /dev/null | sort -V); do
        pip-install-req $f
    done
}

# Install/update global python packages, if specified in dotfiles
update-python() {
    echo; print-title "Updating python packages..."
    make -C $DOTFILES update-python | lc-gradient-delay
    make -C $DOTFILES_EXTRA update-python | lc-gradient-delay
}

# Pytest shortcut, if not already defined
cmd-exists pt || pt() {
    py-cleanup
    py.test ${1:-./test}
}

# New virtual environment, with paths and packages (optionally with name, otherwise use dirname)
mkv2() {
    mkvirtualenv -p python2 -a . ${1:-$(pwd-base)}
    add2virtualenv .
    pipr
}
mkv3() {
    mkvirtualenv -p python3 -a . ${1:-$(pwd-base)}
    add2virtualenv .
    pipr
}
alias mkv='mkv3'

# Clean up leftover junk
py-cleanup() {
    find ${1:-.} -name "*.pyc" -type f -delete -printf "%h/%f\n"
    find ${1:-.} -name "__pycache__" -prune -type d -printf "%h/%f\n" -exec rm -rf '{}' \; 2> /dev/null
}
vim-cleanup() {
    find ${1:-.} -name "*.sw[mnop]" -type f -delete -printf "%h/%f\n"
}

# Run py.test with ludicrous verbosity
ptv(){
    py-cleanup
    vim-cleanup
    py.test -vvv -rwrs --capture=no --full-trace ${1:-./test}
}

# Generate HTML py.test coverage report
ptc() {
    py-cleanup
    vim-cleanup
    py.test --junit-xml=test-reports/py.test-latest.xml\
            --cov ${1:-$(pwd-src)}\
            --cov-report html ./test
    [[ -f htmlcov/index.html ]] && xdg-open htmlcov/index.html &
}

# Print source path of a python module
pyfile() {
    python -c "import $@; print($@.__file__)" | sed 's/\.pyc/\.py/'
}
alias pf='pyfile'

# Open source file of a python module
vpyfile() {
    pf_path=$(pyfile $@)
    [[ -f $pf_path ]] && vim $pf_path
}
alias vpf='vpyfile'

# Cat source file of a python module
cpyfile() {
    pf_path=$(pyfile $@)
    [[ -f $pf_path ]] && cat $pf_path
}
alias cpf='cpyfile'

# Edit virtualenv path extensions
alias vvpathext='vim $VIRTUAL_ENV/lib/python3.6/site-packages/_virtualenv_path_extensions.pth'
alias vvp='vvpathext'

# Workon & cd/deactivate a virtualenv (with autocomplete)
wo() {
    if [ -n "$1" ]; then
        workon $1
        export _VIRT_ENV_PREV_PWD=$PWD
        cd $WORKSPACE/$1
    else
        deactivate
        cd $_VIRT_ENV_PREV_PWD
    fi
}
complete -o default -o nospace -F _virtualenvs wo

# Misc shortcuts for python apps & scripts
alias flask-run='export FLASK_APP=$(pwd-src)/runserver.py;\
                 export FLASK_APP_ENV=LOCAL;\
                 export FLASK_DEBUG=1;\
                 flask run'

#############
# ❰❰ AWS ❱❱ #
#############

s3cat() { aws s3 cp s3://$@ -; }
s3ls() { aws s3 ls s3://$@; }
s3rm() { aws s3 rm s3://$@; }


#########################
# ❰❰ File Operations ❱❱ #
#########################

# Copy $file to $file.bak
alias bak='cp -v "$1"{,.bak} 2> /dev/null'

# Copy a file, also saving a backup ($file2.bak) of target file if it already exists
# Optionally run as another user, e.g. root
# Usage: cp-bak source dest [user]
cp-bak() {
    if [ -n "$3" ]; then
        su -c "cp -v $1{,.bak} 2> /dev/null; cp -v $1 $2" "$3"
    else
        bak "$1"
        cp -v "$1" "$2"
    fi
}

# Verbose copy w/progress
cpv() {
    rsync -WavP --human-readable --progress $1 $2;
}

# Formatted preview for CSV files
# Usage: csv-preview file [n_rows]
csv-preview() {
    n_rows=$((${2:-1000} + 1))
    head -n $n_rows "$1" | sed 's/,,/, ,/g;s/,,/, ,/g' | column -s, -t | less -#2 -NSKQF
}
alias cv='csv-preview'

# Recursive find/replace
# Usage: grepsed find replace [directory]
grepsed() {
    FILE_COUNT=$(wcr "$1" "$3")
    if [ $FILE_COUNT -gt 0 ]; then
       read -p "Replacing $FILE_COUNT occurances of '$1' with '$2' Continue?" -n 1 -r CONFIRM; echo
       if [[ $CONFIRM =~ ^[Yy]$ ]]; then
            grep -rl "$1" ${3:-.} | xargs sed -i "s/$1/$2/g"
       fi
    else
        echo "No occurances of '$1' found"
    fi
}

# Recursive find/delete files
rrm() {
    num_files=$(find ${2:-.} -name "$1" -type f | wc -l)
    read -p "Deleting $num_files files. Continue?" -n 1 -r CONFIRM; echo
    if [[ $CONFIRM =~ ^[Yy]$ ]]; then
        find ${2:-.} -name "$1" -type f -delete
    fi
}

# Recursive find/delete directories
rrmdir() {
    num_dirs=$(find ${2:-.} -name "$1" -type d | wc -l)
    read -p "Deleting $num_dirs dirs. Continue?" -n 1 -r CONFIRM; echo
    if [[ $CONFIRM =~ ^[Yy]$ ]]; then
        find ${2:-.} -name "$1" -type d -exec rm -rf '{}' \;
    fi
}

# Create an archive (*.tar.gz) from given directory
maketar() {
    tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"
}

# Create a ZIP archive of a file or folder.
makezip() {
    zip -r "${1%%/}.zip" "$1"
}

# Mutli-format extract function
extract() {
    [ ! -f $1 ] && echo "$1 is not a valid file" && return 1
    case $1 in
        *.tar.bz2)   tar xvjf $1     ;;
        *.tar.gz)    tar xvzf $1     ;;
        *.bz2)       bunzip2 $1      ;;
        *.rar)       unrar x $1      ;;
        *.gz)        gunzip $1       ;;
        *.tar)       tar xvf $1      ;;
        *.tbz2)      tar xvjf $1     ;;
        *.tgz)       tar xvzf $1     ;;
        *.zip)       unzip $1        ;;
        *.Z)         uncompress $1   ;;
        *.7z)        7z x $1         ;;
        *)           echo "unsupported archive format" ;;
    esac
}

# Swap two files
swap() {
    # Neither file exists (or were not specified)
    [ $# -ne 2 ] && return 1
    [ -e $1 -o -e $2 ] || return 1

    # Only one file exists
    [ ! -e $1 ] && mv "$2" "$1" && return 0
    [ ! -e $2 ] && mv "$1" "$2" && return 0

    # Both files exist
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}


# Enable Terminator to execute startup commands and keep shell open
[[ $TERM_START_CMD ]] && { eval "$TERM_START_CMD"; }
