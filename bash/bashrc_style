# .bashrc_style


#########################
# ‚ù∞‚ù∞ Terminal Colors ‚ù±‚ù± #
#########################

# Terminal Control Characters
export BLACK='\033[0;30;29m'
export RED='\033[0;31;29m'
export GREEN='\033[0;32;29m'
export YELLOW='\033[0;33;29m'
export BLUE='\033[0;34;29m'
export MAGENTA='\033[0;35;29m'
export CYAN='\033[0;36;29m'
export WHITE='\033[0;37;29m'
export BOLD_BLACK='\033[1;30;29m'
export BOLD_RED='\033[1;31;29m'
export BOLD_GREEN='\033[1;32;29m'
export BOLD_YELLOW='\033[1;33;29m'
export BOLD_BLUE='\033[1;34;29m'
export BOLD_MAGENTA='\033[1;35;29m'
export BOLD_CYAN='\033[1;36;29m'
export BOLD_WHITE='\033[1;37;29m'
export DIM_BLACK='\033[2;30;29m'
export DIM_RED='\033[2;31;29m'
export DIM_GREEN='\033[2;32;29m'
export DIM_YELLOW='\033[2;33;29m'
export DIM_BLUE='\033[2;34;29m'
export DIM_MAGENTA='\033[2;35;29m'
export DIM_CYAN='\033[2;36;29m'
export DIM_WHITE='\033[2;37;29m'
export NOCOLOR='\033[0m'

# Color formatting functions
term-color() { echo -e '\['$1'\]'; }
pg-color() { echo -e $1; }
repeat-str() { printf "$1%.s" $(seq $2); }
printc() { printf "%b%b${NOCOLOR}\n" "$@"; }
print-title() {
    HRULE=$(repeat-str '=' $COLUMNS)
    printc $CYAN "$HRULE"
    printc $BLUE "$@"
    printc $CYAN "$HRULE"
}


############################
# ‚ù∞‚ù∞ Colorized Commands ‚ù±‚ù± #
############################

# Bash commands using GRC
GRC=$(which grc)
if [ "$TERM" != dumb ] && test -e "$GRC" && test -n "$GRC"
then
    alias colorize="$GRC -es --colour=auto"
    alias as='colorize as'
    alias configure='colorize ./configure'
    alias diff='colorize diff'
    alias dig='colorize dig'
    alias gas='colorize gas'
    alias gcc='colorize gcc'
    alias g++='colorize g++'
    alias head='colorize head'
    alias ld='colorize ld'
    alias make='colorize make'
    alias mount='colorize mount'
    alias mtr='colorize mtr'
    alias netstat='colorize netstat'
    alias nmap='colorize nmap'
    alias ping='colorize ping'
    alias ps='colorize ps'
    alias traceroute='colorize traceroute'
    alias tail='colorize tail'
fi

# Man pages
export LESS_TERMCAP_mb=$'\E[0;103m'
export LESS_TERMCAP_md=$'\E[04;34m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$(tty -s && tput bold; tty -s && tput setaf 8; tty -s && tput setab 3)
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[04;36m'
export LESS_TERMCAP_mr=$(tty -s && tput rev)
export LESS_TERMCAP_mh=$(tty -s && tput dim)
export LESS_TERMCAP_ZN=$(tty -s && tput ssubm)
export LESS_TERMCAP_ZV=$(tty -s && tput rsubm)
export LESS_TERMCAP_ZO=$(tty -s && tput ssupm)
export LESS_TERMCAP_ZW=$(tty -s && tput rsupm)

# Other Commands
export LS_COLORS="di=34;40:ln=35;40:so=32;40:pi=33;40:ex=31;40:bd=34;46:cd=34;43:su=0;41:sg=0;46:tw=0;42:ow=0;43:"
alias color-filesize='sed -r\
    "s/([0-9\.]+K)/$(pg-color $GREEN)\1$(pg-color $NOCOLOR)/g;\
     s/([0-9\.]+M)/$(pg-color $CYAN)\1$(pg-color $NOCOLOR)/g;\
     s/([0-9\.]+G)/$(pg-color $BOLD_RED)\1$(pg-color $NOCOLOR)/g"'


####################
# ‚ù∞‚ù∞ Psql Pager ‚ù±‚ù± #
####################

export PG_LESS="-ieMSKx4FXR"
PG_PAGER="sed \"s/\([[:space:]]\+[0-9.\-]\+\)$/$(pg-color $CYAN)\1$(pg-color $NOCOLOR)/;"
PG_PAGER+="s/\([[:space:]]\+[0-9.\-]\+[[:space:]]\)/$(pg-color $CYAN)\1$(pg-color $NOCOLOR)/g;"
PG_PAGER+="s/\([[:space:]]\+¬§[[:space:]]\)/$(pg-color $MAGENTA)\1$(pg-color $NOCOLOR)/g;"
PG_PAGER+="s/\([[:space:]]\+[a-f0-9\-]\{36\}[[:space:]]\)/$(pg-color $GREEN)\1$(pg-color $NOCOLOR)/g;"
# PAGER+="s/\(\s[a-f_]\+\s\)/${BOLD_MAGENTA}\1${NOCOLOR}/g;"
PG_PAGER+="s/\([|‚îÇ]\)/$(pg-color $BLUE)\1$(pg-color $NOCOLOR)/g;s/^\([-+‚îÄ‚îå‚îê‚îú‚î¨‚îº‚î¥‚î§‚îî‚îò]\+\)/$(pg-color $BLUE)\1$(pg-color $NOCOLOR)/\" 2>/dev/null | less"
export PG_PAGER


#####################
# ‚ù∞‚ù∞ Bash Prompt ‚ù±‚ù± #
#####################

# Return the prompt symbol to use, colorized based on the return value of the previous command
set_prompt_symbol() {
    if test $1 -eq 0 ; then
        PROMPT_SYMBOL="\$"
    else
        PROMPT_SYMBOL="$(term-color $RED)\$$(term-color $NOCOLOR)"
    fi
}

# Determine active Python virtualenv details (if any)
set_virtualenv() {
    if test -z "$VIRTUAL_ENV" ; then
        PYTHON_VIRTUALENV=""
    else
        PYTHON_VIRTUALENV="$(term-color $BLUE)‚¶ó`basename \"$VIRTUAL_ENV\"`‚¶ò"
    fi
}

# Run after every command before prompt is displayed
set_bash_prompt() {
    set_prompt_symbol $?
    history -a  # Append to bash_history
    set_virtualenv
    PS1="$(term-color $GREEN)\u$(term-color $NOCOLOR)@$(term-color $GREEN)\h $(term-color $BOLD_GREEN)\W $PYTHON_VIRTUALENV$(term-color $NOCOLOR) $PROMPT_SYMBOL "
}

export PROMPT_COMMAND=set_bash_prompt


#############################
# ‚ù∞‚ù∞ ‚úà ‚úà ‚úà ‚úà ‚úà ‚úà ‚úà ‚úà ‚úà ‚úà ‚ù±‚ù± #
#############################

# Lolcat
alias lolcat-q='lolcat 2> /dev/null'
alias lc-gradient='lolcat-q --spread=100 --freq=0.08 2> /dev/null'
alias lc-hgradient='lolcat-q --spread=0.1 --freq=0.005 2> /dev/null'
alias lc-gradient-delay='lc-gradient --animate --speed 250'
alias lc-hgradient-delay='lc-hgradient --animate --speed 250'
alias lc-loop='lolcat-q --animate --duration=99999999'
alias lc-flash='lc-loop --speed=50 --spread=1 --freq=1'

# Figlet
function figlol() {
    figlet -w 270 -f $1 "$2" | lolcat -a -d 1
}
function figlet-all() {
    fonts=$(ls ~/.figlet/*.flf)
    for font in $fonts; do
        basename $font
        figlol $font "$@"
    done
}
alias fabulous='figlol ~/.figlet/alligator.flf'
alias faabulous='figlol ~/.figlet/starwars.flf'
alias faaabulous='figlol ~/.figlet/univers.flf'
alias faaaabulous='figlol ~/.figlet/roman.flf'
alias faaaaabulous='figlol ~/.figlet/contessa.flf'
alias faaaaaabulous='figlol ~/.figlet/cybermedium.flf'
alias faaaaaaabulous='figlol ~/.figlet/cosmic.flf'

# Misc string coloring/formatting
alias ratelimit='pv -qL80k'
alias randombit='shuf -i 0-1 -n 1 -z  | tr "\0" " "'
alias randomchars='grep -o --binary-files=text "[[:alpha:]]" /dev/urandom |\
                   tr -d "[a-zA-Z]" |\
                   xargs -n $((($COLUMNS*80)/100)) |\
                   tr -d " "'
charbar() { python -c "print('$1' * $(($COLUMNS*2)))"; }
charbar2() { python -c "print('$1 ' * $(($COLUMNS)))"; }  # Extra spacing for wide chars
charbarf() { charbar $1 | lc-loop -p $2; }
charbarf2() { charbar2 $1 | lc-loop -p $2; }
color-bit() { printf "\e[$(echo $1|tr 01 20);32;29m$1\e[0m"; }
color-bar() { printf "\x1b[48;5;$1m\n"; }
color-str() { printf "\e[38;5;$(($(od -d -N 2 -A n /dev/urandom)%$(tty -s && tput colors)))m$1\e[0m"; }

# Print loops
alias hex-barf='cat /dev/urandom | hexdump -C | grep "b1 05"'
alias bin-barf='while true; do color-bit $(randombit); done'
alias term-barf-1='while true; do color-str ‚Ä¢; done'
alias term-barf-2='yes "$(seq 231 -1 16)" | while read i; do color-bar $i; sleep .02; done'
alias term-barf-3='randomchars | lolcat -f | ratelimit'
alias term-barf-4='randomchars | figlet -w 120 | lolcat -f | ratelimit'
alias term-barf-5a='charbarf '‚Ä¢' 2'
alias term-barf-5b='charbarf '¬§' 4'
alias term-barf-5c='charbarf '‚óè' 55'
alias term-barf-5d='charbarf '‚ó§' 60'
alias term-barf-5e='charbarf '‚ñà' 1'
alias term-barf-5f='charbarf '‚ñâ' 65'
alias term-barf-5f='charbarf ‚Äï 2'
alias term-barf-6a='charbarf2 ‚¨õÔ∏è 0.5'
alias term-barf-6b='charbarf2 üî≤ 2'
alias term-barf-6c='charbarf2 üí© 10'

# More colorized commands
alias fortune='fortune | lolcat -a'
alias fabulous-syslog='syslog | lolcat -a'
alias fabulous-ls='ll | lolcat -a'
alias fabulous-netstat='while true; do netconn | lolcat -a; done'
alias fabulous-ps='psu | lolcat -a'
