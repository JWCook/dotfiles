let vim_header = [
    \ '                 88                      ',
    \ '                 ^^                      ',
    \ '                                         ',
    \ '  8b       d8    88    88.dPYba..adPYba. ',
    \ '  `8b     d8`    88    88P`   ^88^    ^8a',
    \ '   `8b   d8`     88    88      88      88',
    \ '    `8b.d8`      88    88      88      88',
    \ '      ^8^        88    88      88      88',
    \ ]


""""""""""""""""
" ‚ù∞‚ù∞ Python ‚ù±‚ù± "
""""""""""""""""

let g:venv_dir = $HOME.'/.virtualenvs/nvim'
let g:python_host_prog = venv_dir.'/bin/python3'
let g:python3_host_prog = venv_dir.'/bin/python3'
let g:python_activate = 'source '.venv_dir.'/bin/activate;'
let g:pip_update = python_activate.' pip install -U '


"""""""""""""""""
" ‚ù∞‚ù∞ Plugins ‚ù±‚ù± "
"""""""""""""""""

if has('nvim')
  call plug#begin('~/.local/share/nvim/plugged')
else
  call plug#begin('~/.vim/plugged')
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:plug_timeout=120

" UI
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'mhinz/vim-startify'

" Git
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-rhubarb'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'airblade/vim-gitgutter'

" Autocomplete
" Plug 'Valloric/YouCompleteMe', {'do': 'make -C ~/dotfiles update-ycm'}
if has('nvim')
  Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'}
else
  Plug 'Shougo/deoplete.nvim'
endif
Plug 'deoplete-plugins/deoplete-jedi'
let g:deoplete#enable_at_startup = 1
" Plug 'deoplete-plugins/deoplete-clang', {'do': pip_update.'pynvim'}
" let g:deoplete#sources#clang#libclang_path = ''
" let g:deoplete#sources#clang#clang_header = ''

" Search
if has('nvim')
  Plug 'Shougo/denite.nvim', {'do': pip_update.'pynvim'} ", {'do': ':UpdateRemotePlugins'}
else
  Plug 'Shougo/denite.nvim'
endif

" Syntax
Plug 'w0rp/ale'
Plug 'chrisbra/csv.vim'
Plug 'dag/vim-fish'
Plug 'pangloss/vim-javascript'
Plug 'tpope/vim-surround'
Plug 'godlygeek/tabular'
Plug 'Kuniwak/vint', {'do': pip_update.'vim-vint'}
Plug 'WolfgangMehner/bash-support'
Plug 'frazrepo/vim-rainbow'
let g:rainbow_active = 1

" Markdown/Docs
Plug 'tpope/vim-markdown'
Plug 'jtratner/vim-flavored-markdown'
Plug 'suan/vim-instant-markdown'
" Plug 'Rykka/riv.vim'
" Plug 'Rykka/InstantRst', {'do': pip_update.'U https://github.com/Rykka/instant-rst.py/archive/master.zip'}

" Python
Plug 'MicahChambers/vim-flake8'
Plug 'alfredodeza/pytest.vim'
Plug 'jmcantrell/vim-virtualenv'

" Other Utilities (Commands)
Plug 'qpkorr/vim-bufkill'
Plug 'tomtom/tcomment_vim'
Plug 'wellle/visual-split.vim'
Plug 'ntpeters/vim-better-whitespace'

" Other Utilities (UI)
Plug 'vim-scripts/Gundo'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" Plug 'jistr/vim-nerdtree-tabs'
Plug 'majutsushi/tagbar'
Plug 'Shougo/neoyank.vim'
Plug 'Shougo/vimproc.vim', {'do': 'make'}

" Must be loaded last to work with other plugins
Plug 'ryanoasis/vim-devicons'

" Color schemes
Plug 'atelierbram/Base2Tone-vim'
Plug 'tyrannicaltoucan/vim-deep-space'
Plug 'aereal/vim-colors-japanesque'
Plug 'altercation/vim-colors-solarized'
Plug 'nanotech/jellybeans.vim'
Plug 'sickill/vim-monokai'
Plug 'rakr/vim-two-firewatch'
" Plug 'Donearm/Ubaryd'
" Plug 'antlypls/vim-colors-codeschool'
" Plug 'CruizeMissile/Revolution.vim'
" Plug 'ninja/sky'

call plug#end()

" Plugin updates (including snapshot, help tags, and vim-plug itself)
nnoremap <silent> <F12> :PlugSnapshot! ~/.vim/plug-snapshot \| :q \| PlugClean! \| :PlugUpdate \| :PlugUpgrade<CR>
nnoremap <silent> <C-F12> :PlugStatus<CR>


""""""""""""""""""""""""
" ‚ù∞‚ù∞ Terminal Codes ‚ù±‚ù± "
""""""""""""""""""""""""
" Make vim work with some non-ASCII terminal codes by mapping them to vim keycodes

" Reference links
" ---------------
" * https://vim.fandom.com/wiki/Mapping_fast_keycodes_in_terminal_Vim
" * https://invisible-island.net/xterm/xterm-function-keys.html

" Available vim keycodes: <F13-F37>, <S-F13>-<S-F37>
" Available function key mappings
" -------------------------------
"           S-F1  C-S-F1
" F2  C-F2  S-F2  C-S-F2
"                 C-S-F3
"           S-F4  C-S-F4
" F5  C-F5  S-F5  C-S-F5
"           S-F6  S-S-F6
"     C-F7  S-F7  C-S-F7
"           S-F8  S-S-F8
" F9  C-F9  S-F9  C-S-F9
"                 C-S-F10
"           S-F12 C-S-F12

" gnome-terminal
" --------------
" set <F13>=O1;5Q   " F13 -> C-F2
" set <F14>=O1;5R   " F14 -> C-F3
" set <F15>=O1;5S   " F15 -> C-F4
" set <F16>=O1;2P   " F16 -> S-F1
" set <F17>=O1;2Q   " F17 -> S-F2
" set <F18>=O1;2R   " F18 -> S-F3
" set <F19>=O1;2S   " F19 -> S-F4
" set <F21>=O1;6P   " F21 -> C-S-F1
" set <F22>=O1;6Q   " F22 -> C-S-F2
" set <F23>=O1;6R   " F23 -> C-S-F3

" xterm
" -----
set <F13>=[1;5Q   " F13 -> C-F2
set <F14>=[1;5R   " F14 -> C-F3
set <F15>=[1;5S   " F15 -> C-F4
set <F16>=[1;2P   " F16 -> S-F1
set <F17>=[1;2Q   " F17 -> S-F2
set <F18>=[1;2R   " F18 -> S-F3
set <F19>=[1;2S   " F19 -> S-F4
set <F21>=[1;6P   " F21 -> C-S-F1
set <F22>=[1;6Q   " F22 -> C-S-F2
set <F23>=[1;6R   " F23 -> C-S-F3


"""""""""""""""""""""""""
" ‚ù∞‚ù∞ Plugin Settings ‚ù±‚ù± "
"""""""""""""""""""""""""

let ignore_files = [ '__pycache__', '\~$', '\.egg-info$', '^\.cache$', '^\.git$', '^\.idea',
                   \ '^\.sonar$', '^\.tox$', '_build$', '^docs/_build', '^dist$', 'htmlcov$',
                   \ '^tmp$', '^\.coverage$', '\.a$', '\.class$', '\.idea$', '\.o$', '\.obj$',
                   \ '\.pyc$','\.sw\a$', '\.so$']

" Airline
" let g:airline_theme='ubaryd'
let g:airline_theme='deep_space'
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#fnamemod=':t'
set laststatus=2

" Ale
let g:ale_sign_error = '‚úò‚ù±'
let g:ale_sign_warning = '‚ÄΩ‚ù±'
let g:ale_sign_info = '‚Ä°‚ù±'
let g:ale_sign_style_error = '‚ù±‚ù±'
let g:ale_sign_style_warning = '‚ù±‚ù±'
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'always'
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_delay = 500
let g:ale_maximum_file_size = 1048576

" Fugitive
let g:fugitive_gitlab_domains = [ 'dsigitlab.research.auto.pioneer.com' ]
nnoremap <silent> gf :Gdiff<CR>
nnoremap <silent> gs :Gstatus<CR>
nnoremap <silent> gp :Gpull<CR>
nnoremap <silent> gw :Gwrite<CR>
nnoremap <silent> gb :Gbrowse<CR>
nnoremap <silent> gl :Gblame<CR>
nnoremap <silent> gc :execute ':Gcommit' \| :startinsert<CR>
nnoremap <silent> gu :Git reset --soft HEAD~1 \| :redraw<CR>

" tComment
nnoremap <silent> <F3> :TComment<CR>
inoremap <silent> <F3> <C-O>:TComment<CR>
vnoremap <silent> <F3> :TCommentBlock<CR>
let g:tcomment_opleader1='tc'

" Visual Split (F4/Ctrl-F4)
vnoremap <silent> <F4>  :VSResize<CR>
vnoremap <silent> <F15> :VSSplit<CR>

" Tabular (Ctrl-F3)
nnoremap <silent> <F14> :Tabularize /\|<CR>
inoremap <silent> <F14> <C-O>:Tabularize /\|<CR>
vnoremap <silent> <F14> :Tabularize /\|<CR>

" NERD Tree
" nnoremap <silent> <F6> ::NERDTreeTabsToggle<CR>
nnoremap <silent> <F6> :NERDTreeToggle<CR>
inoremap <silent> <F6> <ESC>:NERDTreeToggle<CR>
let NERDTreeIgnore=ignore_files
let NERDTreeShowHidden=1
let NERDTreeWinSize=28

" Gundo
nnoremap <silent> <C-F6> :GundoToggle<CR>
inoremap <silent> <C-F6> <ESC>:GundoToggle<CR>
let g:gundo_width=30
let g:gundo_close_on_revert=1

" Tagbar
nnoremap <silent> <F7> :TagbarToggle<CR>
inoremap <silent> <F7> <C-O>:TagbarToggle<CR>
let g:tagbar_width=20
let g:tagbar_compact=1
let g:tagbar_zoomwidth=0 " Zoom to longest tag length
let g:tagbar_sort=0      " Sort tags by file order instead of by name

let g:tagbar_type_make = {
    \ 'kinds':[
        \ 'm:macros',
        \ 't:targets'
    \ ]
\}

let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
\ }

" Flake8
autocmd FileType python nnoremap <silent> <buffer> <F8> :call flake8#Flake8()<CR>
autocmd FileType python nnoremap <silent> <buffer> <C-F8> :call flake8#Flake8UnplaceMarkers()<CR>
let g:flake8_show_in_gutter=1

" GitGutter
noremap <silent> \ :GitGutterToggle<CR>
let g:gitgutter_realtime=0
let g:gitgutter_eager=0
let g:gitgutter_sign_added='‚ûï'
let g:gitgutter_sign_removed='‚ûñ'
let g:gitgutter_sign_modified_removed='‚âÉ'

" Indent guides
noremap <silent> <C-\> :IndentGuidesToggle<CR>
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=237
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235

" Pytest
let g:pytest_test_dir = 'test'
command! PF w! | Pytest function
command! PFV w! | Pytest function verbose
command! PT  w! | Pytest file
command! PTV w! | Pytest file verbose
command! PP  w! | Pytest project
command! PPV w! | Pytest project verbose
command! PS  Pytest session
command! PL  Pytest fails
command! PD  Pytest projecttestwd

" Startify
nnoremap <silent> <F10>   :SSave! ~quicksave<CR>
inoremap <silent> <F10>   <C-O>:SSave! ~quicksave<CR>
nnoremap <silent> <C-F10> :SLoad  ~quicksave<CR>
inoremap <silent> <C-F10> <C-O>:SLoad  ~quicksave<CR>
nnoremap <silent> <S-F10> :Startify<CR>
inoremap <silent> <S-F10> <ESC>:Startify<CR>
let g:startify_files_number=15
let g:startify_change_to_vcs_root=1
let g:startify_skiplist=[ '.gitignore' ]
let g:startify_bookmarks=[]
let g:startify_custom_header=vim_header
let g:startify_session_dir='~/.vim/session'
" Make Startify play nicely with NERD Tree
" let g:startify_session_before_save=['silent! NERDTreeTabsClose']
let g:startify_session_before_save=['silent! NERDTreeClose']
autocmd User Startified setlocal buftype=
autocmd VimEnter * if !argc() | Startify | NERDTree | wincmd w | endif

" Virtualenvs
let g:virtualenv_auto_activate=1
let g:virtualenv_stl_format='‚¶ó%n‚¶ò'
command! VA VirtualEnvActivate
nnoremap <silent> vl :VirtualEnvList<CR>
nnoremap <silent> vd :VirtualEnvDeactivate<CR>

" Whitespace
nnoremap ww :StripWhitespace<CR>
nnoremap wt :ToggleWhitespace<CR>
nnoremap ws :ToggleStripWhitespaceOnSave<CR>


""""""""""""""""""""""""
" ‚ù∞‚ù∞ Plugin: Denite ‚ù±‚ù± "
""""""""""""""""""""""""

" if exists('denite')
augroup user_plugin_denite
  autocmd!
  autocmd FileType denite call s:denite_settings()
  autocmd VimResized * call s:denite_resize()
  autocmd WinEnter * if &filetype =~# '^denite' | highlight! link CursorLine WildMenu | endif
  autocmd WinLeave * if &filetype ==# 'denite'  |  highlight! link CursorLine NONE | endif
augroup END

" Mappings
nnoremap <C-B> :DeniteProjectDir -start-filter buffer<CR>
inoremap <C-B> <ESC>:DeniteProjectDir -start-filter buffer<CR>
nnoremap <C-F> :Denite grep:/home/cookjo/workspace<CR>
inoremap <C-F> <ESC>:Denite grep:/home/cookjo/workspace<CR>
nnoremap <C-G> :DeniteProjectDir -buffer-name=git -direction=top file/rec/git<CR>
inoremap <C-G> <ESC> :DeniteProjectDir -buffer-name=git -direction=top file/rec/git<CR>
nnoremap <C-P> :DeniteProjectDir -start-filter file/rec<CR>
inoremap <C-P> <ESC>:DeniteProjectDir -start-filter file/rec<CR>
" nnoremap <C-R> :DeniteProjectDir -start-filter command_history<CR>
nnoremap <C-S> :DeniteProjectDir source<CR>
nnoremap <C-Y> :Denite neoyank<CR>
inoremap <C-Y> <ESC>:Denite neoyank<CR>

" Actions within Denite window
function! s:denite_settings() abort
  nnoremap <silent><buffer><expr> <CR>  denite#do_map('do_action')
  nnoremap <silent><buffer><expr> <Esc> denite#do_map('quit')
  inoremap <silent><buffer><expr> <Esc> denite#do_map('quit')
  nnoremap <silent><buffer><expr> <Tab> denite#do_map('choose_action')
  nnoremap <silent><buffer><expr><nowait> <Space> denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> dd denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> yy denite#do_map('do_action', 'yank')
  nnoremap <silent><buffer><expr> vv denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><expr> hh denite#do_map('do_action', 'split')
  nnoremap <silent><buffer><expr> i  denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> p  denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q  denite#do_map('quit')
  nnoremap <silent><buffer><expr> r   denite#do_map('redraw')
endfunction

" Window position
function! s:denite_resize()
    call denite#custom#option('_', {
    \ 'winwidth': (&columns / 2) - 1,
    \ 'winheight': &lines / 3,
    \ 'wincol': 0,
    \ 'winrow': 1,
    \ })
endfunction
call s:denite_resize()

if has('nvim')
    call denite#custom#option('_', { 'split': 'floating', 'statusline': 0 })
endif

" Denite + Git file search
call denite#custom#alias('source', 'file/rec/git', 'file/rec')
call denite#custom#var('file/rec/git', 'command',
    \ ['git', 'ls-files', '-co', '--exclude-standard'])

" Denite + Silver Searcher
call denite#custom#var('file/rec', 'command',
    \ ['ag', '-U', '--hidden', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])
call denite#custom#var('grep', 'default_opts', [ '--vimgrep', '--hidden' ])

" denite content search
map <leader>a :DeniteProjectDir -buffer-name=grep -default-action=quickfix grep:::!<CR>

" Ignore patterns; use .gitignore and/or ag .ignore instead
" let dignore=&wildignore . ',*.pyc,.git,.hg,.svn'
" call denite#custom#var('file/rec', 'command',
"     \ ['scantree.py', '--path', ':directory', '--ignore', dignore])
" endif


""""""""""""""""""""""""""""""""""
" ‚ù∞‚ù∞ External Command Aliases ‚ù±‚ù± "
""""""""""""""""""""""""""""""""""

" Launch a subshell command without prompt
command! -nargs=1 Silent | execute ':silent !'.<q-args> | execute ':redraw!'

nnoremap <silent> tt :Gcd / \| :Silent tig<CR>
nnoremap <silent> th :Gcd / \| :Silent tig %<CR>
nnoremap ls !ls -Alhv --group-directories-first<CR>
" Format current JSON file using jq
command! Jsonify %!jq .


"""""""""""""""""
" ‚ù∞‚ù∞ General ‚ù±‚ù± "
"""""""""""""""""

set viminfo='100,n$HOME/.vim/viminfo
nnoremap ev :vsplit $MYVIMRC<CR>
nnoremap sv :source $MYVIMRC<CR>
nnoremap rr :redraw!<CR>

" set clipboard+=unnamedplus

" Disable (slow) saving backup of current buffer on write
set nobackup

" Don't save local values or folds in sessions
set ssop-=options
set ssop-=folds

set timeoutlen=200  " Mapped sequence timeout
set ttimeoutlen=50 " Key code sequence timeout

" Ignore these files when completing names
set wildignore=*/__pycache__/*,*/.tox/*,*.o,*.a,*~,*.class,*.gif,*.jpg,*.la,*.mo,*.obj,*.png,*.pyc,*.so,*.sw*,*.xpm

" Add minimum screen rows/columns around cursor
set scrolloff=1
set sidescrolloff=5

" Darn those fat fingers
ca W w
ca WQ wq
ca Wq wq
ca WQa wqa
ca Wqa wqa
ca Qa qa
ca Q q

" Pressing shift is hard
nnoremap ; :
vnoremap ; :

" Who even uses ex mode
map q: <nop>
nnoremap Q <nop>

" Enable persistent undo
set undodir=~/.vim/undo
set undofile
au BufWritePre /tmp/* setlocal noundofile

autocmd FileType fish compiler fish


""""""""""""""""""""""""""
" ‚ù∞‚ù∞ Colors and Fonts ‚ù±‚ù± "
""""""""""""""""""""""""""

" Extra Highlighting Rules
au BufNewFile,BufRead *.ejs set filetype=html
au BufNewFile,BufRead *.less set filetype=css

" Color scheme
try
  " let g:solarized_termcolors=256
  " let g:deepspace_italics=1
  colorscheme jellybeans "ubaryd monokai solarized
endtry
autocmd VimEnter,Colorscheme * :hi VertSplit ctermfg=237 ctermbg=235
highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE
set background=dark

" Add color columns
if exists('+colorcolumn')
  let &colorcolumn="80,100,120"
  highlight ColorColumn ctermbg=235
endif


""""""""""""""""""""
" ‚ù∞‚ù∞ Whitepsace ‚ù±‚ù± "
""""""""""""""""""""

" 1 tab == 4 spaces
set copyindent
set expandtab
set shiftround
set shiftwidth=4
set softtabstop=4
set tabstop=4

" YAML, vimscript: 1 tab = 2 spaces
autocmd FileType yaml,vim  setlocal shiftwidth=2 softtabstop=2 tabstop=2

set pastetoggle=<leader>p

" Tabs and non-breaking spaces are evil
set list
set listchars=tab:‚ù±¬∑,nbsp:¬§

" Ctrl+Up/Down/j/k to move across display lines (i.e., including line breaks)
nnoremap <C-Up> gk
inoremap <C-Up> <C-O>gk
vnoremap <C-Up> gk
nnoremap <C-Down> gj
inoremap <C-Down> <C-O>gj
vnoremap <C-Down> gj
nnoremap <C-k> gk
vnoremap <C-k> gk
nnoremap <C-j> gj
vnoremap <C-j> gj

" Wrap visual selection to 100 chars (Shift-F3)
vnoremap <silent> <F18> :<C-U>set textwidth=100<CR> \| gv \| gq \| :<C-U>set textwidth=0<CR>
set wrap
set showbreak=‚ù±‚ù±‚ù±‚ù±
set whichwrap+=<,>,h,l

" Sort visual selection, keeping only unique (Ctrl-Shift-F3)
vnoremap <silent> <F23> :sort u<CR>


""""""""""""""""
" ‚ù∞‚ù∞ Search ‚ù±‚ù± "
""""""""""""""""

set ignorecase " Ignore case when searching
set smartcase  " Except when uppercase is used in search

" Clear search highligts
nnoremap <leader>b :nohlsearch<CR>


""""""""""""""""""""""""
" ‚ù∞‚ù∞ User Interface ‚ù±‚ù± "
""""""""""""""""""""""""

set nu                         " Enable Line Numbers
set fillchars+=vert:‚ñö          " Split bar fill character
set lazyredraw                 " Don't redraw while executing macros

" Code folding with S-F4
set foldmethod=indent
set foldlevel=99
nnoremap <silent> <F4> za
inoremap <silent> <F4> <C-O>za

" Show match for brackets under cursor
set showmatch
set mat=2

" Command bar
"set cmdheight=2


""""""""""""""""""""""""""""""
" ‚ù∞‚ù∞ Buffers/Windows/Tabs ‚ù±‚ù± "
""""""""""""""""""""""""""""""

" CTRL-Left/Right/h/l to move between buffers
noremap <silent> <C-Left>  :bprev<CR>
noremap <silent> <C-Right> :bnext<CR>
noremap <silent> <C-h>     :bprev<CR>
noremap <silent> <C-l>     :bnext<CR>

" Alt-Left/Right/Up/Down/h/j/k/l to move between windows
nnoremap <silent> <A-Up>    :wincmd k<CR>
inoremap <silent> <A-Up>    <C-O>:wincmd k<CR>
nnoremap <silent> <A-Down>  :wincmd j<CR>
inoremap <silent> <A-Down>  <C-O>:wincmd j<CR>
nnoremap <silent> <A-Left>  :wincmd h<CR>
inoremap <silent> <A-Left>  <C-O>:wincmd h<CR>
nnoremap <silent> <A-Right> :wincmd l<CR>
inoremap <silent> <A-Right> <C-O>:wincmd l<CR>
noremap <silent> <A-k>     :wincmd k<CR>
noremap <silent> <A-j>     :wincmd j<CR>
noremap <silent> <A-h>     :wincmd h<CR>
noremap <silent> <A-l>     :wincmd l<CR>

" Alt +/-/= to increase/decrease/equalize window size
nnoremap <silent> +    :wincmd +<CR>
inoremap <silent> +    <C-O>:wincmd +<CR>
nnoremap <silent> -    :wincmd -<CR>
inoremap <silent> -    <C-O>:wincmd -<CR>
nnoremap <silent> =    :wincmd =<CR>
inoremap <silent> =    <C-O>:wincmd =<CR>

" Windows splits
set splitbelow
set splitright
nnoremap <silent> vv <C-w>v
nnoremap <silent> hh <C-w>s

" Create/close buffers/tabs
command! BN new
nnoremap <silent> <leader>q :BD<CR>
command! TD tabclose
command! TN tabnew | vsp

" Shift+ Left/Right to move between tabs
nnoremap <silent> <S-Left>  :tabp<CR>
inoremap <silent> <S-Left>  <C-O>:tabp<CR>
nnoremap <silent> <S-Right> :tabn<CR>
inoremap <silent> <S-Right> <C-O>:tabn<CR>

" Ctrl-Shift-Left/Right to move tabs
nnoremap <silent> <C-S-Left>   :tabm -1<CR>
nnoremap <silent> <C-S-Right>  :tabm +1<CR>

" Switch between unsaved buffers w/o save, preserves history
set hidden

" Alt+h/j/k/l moves cursor in insert mode
" inoremap <C-V><A-h> <left>
" inoremap <C-V><A-j> <down>
" inoremap <C-V><A-k> <up>
" inoremap <C-V><A-l> <right>


"""""""""""""""""""""""""""""
" ‚ù∞‚ù∞ Misc. Auto Commands ‚ù±‚ù± "
"""""""""""""""""""""""""""""

" Disable overhead for large files (over 10MB)
if !exists("auto_commands_loaded")
  let auto_commands_loaded=1
  let g:LargeFile=1024 * 1024 * 10
  augroup LargeFile
    autocmd BufReadPre * let f=expand("<afile>") | if getfsize(f) > g:LargeFile | set eventignore+=FileType | setlocal noswapfile bufhidden=unload buftype=nowrite undolevels=-1 | else | set eventignore-=FileType | endif
    augroup END
endif


"""""""""""""""""""""""""""""""
" ‚ù∞‚ù∞ (Legacy) Vim-Specific ‚ù±‚ù± "
"""""""""""""""""""""""""""""""

" Settings that are already defaults in nvim
if !has('nvim')
  set encoding=utf-8
  syntax on  " Enable syntax highlighting
  set history=1000
  filetype plugin indent on  " Enable filetype-specific plugins and indent files
  set nocompatible  " Prevents VIM from being nerfed into acting like VI
  set wildmenu
  set showcmd  " Show partial commands during entry
  set t_Co=256
  set autoindent
  set smarttab
  set backspace=indent,eol,start
  set hlsearch   " Highlight search results
  set incsearch  " Search while typing
  set noerrorbells
  set novisualbell
  set t_vb=
  set ttimeout
endif
